services:
  app:
    build: .
    container_name: flask_app
    command: python main.py
    volumes:
      - ./app:/app
    ports:
      - "5000:5000"
    depends_on:
      db:
        condition: service_started
      rabbitmq:
        condition: service_started
    environment:
      FLASK_ENV: development
      DATABASE_URL: postgresql://postgres:postgres@db:5432/hertz
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672/
    networks:
      - mynetwork
    restart: on-failure

  consumer:
    build: .
    container_name: rabbitmq_consumer
    command: sh -c "cd /app && python infrastructure/messaging/consumer.py"
    depends_on:
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_healthy
    environment:
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672/
      DATABASE_URL: postgresql://postgres:postgres@db:5432/hertz
    networks:
      - mynetwork
    restart: on-failure

  db:
    image: postgres:15
    container_name: postgres_db
    environment:
      POSTGRES_DB: hertz
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./app/infrastructure/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - mynetwork
    restart: always
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running"]
      interval: 10s
      timeout: 5s
      retries: 10

networks:
  mynetwork:
    driver: bridge

volumes:
  pgdata:
